{
  "openapi": "3.1.0",
  "info": {
    "title": "Trade Python AI Service",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/chat/": {
      "post": {
        "tags": [
          "Chat"
        ],
        "summary": "AI Chat Endpoint with Streaming",
        "description": "사용자의 채팅 메시지를 받아 AI와 대화하고, 응답을 실시간으로 스트리밍합니다.\n\n- **요청 본문:** `ChatRequest` 모델 참조\n    - `user_id`: 회원 식별자 (없으면 비회원)\n    - `session_uuid`: 기존 대화의 UUID\n    - `message`: 사용자 메시지\n- **응답:**\n    - `StreamingResponse`: `text/event-stream` 형식의 SSE 스트림.\n    - 각 이벤트는 JSON 형식이며, `type`과 `data` 필드를 포함합니다.\n      - `type: 'session_id'`: 새 채팅 세션이 시작될 때 반환되는 세션 UUID\n      - `type: 'token'`: AI가 생성하는 응답 토큰\n      - `type: 'finish'`: 스트림 종료\n      - `type: 'error'`: 오류 발생",
        "operationId": "handle_chat_api_v1_chat__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "채팅 엔드포인트를 찾을 수 없음"
          },
          "500": {
            "description": "서버 내부 오류"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/news/": {
      "post": {
        "tags": [
          "News"
        ],
        "summary": "온디맨드 뉴스 생성",
        "description": "Spring Boot 스케줄러에 의해 호출되는 온디맨드 뉴스 생성 엔드포인트.\nClaude 4 Sonnet의 네이티브 웹 검색을 사용하여 최신 무역 뉴스를 생성하고 DB에 저장합니다.",
        "operationId": "generate_trade_news_api_v1_news__post",
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "뉴스 엔드포인트를 찾을 수 없음"
          },
          "500": {
            "description": "서버 내부 오류"
          }
        }
      }
    },
    "/api/v1/monitoring/run-monitoring": {
      "post": {
        "tags": [
          "Monitoring"
        ],
        "summary": "Run Monitoring",
        "description": "모니터링이 활성화된 모든 북마크의 최신 변경 사항을 주기적으로 감지하고, 유의미한 업데이트 발생 시 알림 생성 작업을 Redis에 큐잉하는 백그라운드 엔드포인트입니다.\n\n<details>\n<summary>I. Producer (생산자: FastAPI) 로직</summary>\n\n> 이 엔드포인트는 알림 작업을 생성하는 '생산자' 역할을 수행합니다.\n\n**주요 처리 순서:**\n1.  **분산 락 (Distributed Lock):** Redis (`SET NX`)를 사용하여 여러 인스턴스의 동시 실행을 방지합니다.\n2.  **북마크 조회:** `monitoring_active=True`인 모든 북마크를 DB에서 조회합니다.\n3.  **병렬 및 속도 제어 처리:**\n    -   `asyncio.Semaphore`: LangChain 서비스에 대한 동시 요청 수를 제한하여 과부하를 방지합니다.\n    -   `Aiolimiter`: 분당 요청 수를 제어하여 외부 API의 속도 제한(Rate Limit)을 준수합니다.\n    -   `Tenacity`: API 호출 실패 시 지수 백오프(Exponential Backoff)를 적용하여 자동으로 재시도합니다.\n4.  **업데이트 처리 및 Redis 큐잉 (신뢰성 큐 패턴):**\n    -   **DB 저장:** 변경 사항 발견 시, `update_feeds` 테이블에 업데이트 내역을 저장합니다.\n    -   **Redis 큐잉:**\n        1.  **알림 상세 정보 (Hash):** `HSET` 명령어를 사용하여 `daily_notification:detail:{uuid}` 키에 알림 상세 내용을 저장합니다.\n            -   `HSET`: Hash 데이터 구조(Key-Value 맵과 유사)에 여러 필드-값 쌍을 저장하는 명령어입니다.\n        2.  **알림 작업 큐 (List):** `LPUSH` 명령어를 사용하여 `daily_notification:queue:{TYPE}` (예: `...:EMAIL`) 키에 처리할 작업의 `uuid`를 추가합니다.\n            -   `LPUSH`: List 데이터 구조(Array 또는 LinkedList와 유사)의 맨 앞에 요소를 추가하는 명령어입니다.\n</details>\n\n<details>\n<summary>II. Consumer (소비자: Spring Boot) 구현 가이드</summary>\n\n> Redis 큐에 쌓인 작업은 Spring Boot와 같은 별도의 워커(Worker) 프로세스가 처리해야 합니다.\n\n**권장 처리 순서 (신뢰성 보장):**\n1.  **작업 원자적으로 이동 (`BLMOVE`):** '대기 큐'에서 '처리 중 큐'로 작업을 안전하게 이동시킵니다.\n2.  **상세 정보 조회 (`HGETALL`):** 이동시킨 작업 `uuid`를 사용하여 상세 정보를 가져옵니다.\n3.  **비즈니스 로직 수행:** 실제 이메일 발송 등 알림 처리를 수행합니다.\n4.  **작업 완료 처리 (`LREM`):** 작업이 성공하면 '처리 중 큐'에서 해당 작업을 제거합니다.\n5.  **예외 처리:** 오류 발생 시 작업을 '처리 중 큐'에 남겨두어 데이터 유실을 방지합니다.\n</details>\n\n<details>\n<summary>III. 핵심 Redis 명령어 및 Spring Data Redis 타입 매핑</summary>\n\n> Spring Boot (`RedisTemplate`) 사용 시 각 Redis 명령어와 매핑되는 Java 타입을 명시합니다.\n\n#### **1. `BLMOVE`**\n-   **설명:** 리스트의 마지막 요소를 다른 리스트의 첫 번째 요소로 **원자적으로 이동**시키고, 만약 원본 리스트가 비어있으면 지정된 시간 동안 새로운 요소가 추가되기를 기다리는(Blocking) 명령어입니다.\n-   **핵심 역할:** 워커가 여러 개 실행되어도 **단 하나의 워커만이 작업을 가져가도록 보장**하며(경쟁 상태 방지), 큐가 비었을 때 불필요한 CPU 사용을 막아줍니다. 작업 유실 방지의 핵심입니다.\n-   **Java `RedisTemplate` 반환 타입:** `String`\n    -   이동된 작업 `uuid`가 문자열로 반환됩니다. 큐가 비어 타임아웃이 발생하면 `null`이 반환됩니다.\n    ```java\n    String taskId = redisTemplate.opsForList().move(\n        \"daily_notification:queue:EMAIL\", ListOperations.Direction.RIGHT,\n        \"daily_notification:processing_queue:EMAIL\", ListOperations.Direction.LEFT,\n        Duration.ofSeconds(10)\n    );\n    if (taskId != null) {\n        // ... process task\n    }\n    ```\n\n#### **2. `HGETALL`**\n-   **설명:** Hash 데이터 구조에서 모든 필드와 값의 쌍을 가져오는 명령어입니다.\n-   **핵심 역할:** 작업 `uuid`에 해당하는 모든 알림 상세 정보(수신자, 메시지 내용 등)를 한 번의 명령어로 조회합니다.\n-   **Java `RedisTemplate` 반환 타입:** `Map<Object, Object>` 또는 `Map<String, String>`\n    -   조회된 Hash의 필드-값 쌍들이 `Map`으로 반환됩니다. `RedisTemplate` 설정에 따라 타입을 명시적으로 지정할 수 있습니다.\n    ```java\n    Map<Object, Object> details = redisTemplate.opsForHash().entries(\"daily_notification:detail:\" + taskId);\n    String userId = (String) details.get(\"user_id\");\n    String message = (String) details.get(\"message\");\n    ```\n\n#### **3. `LREM`**\n-   **설명:** 리스트에서 지정된 값과 일치하는 요소를 **개수를 지정하여** 제거하는 명령어입니다.\n-   **핵심 역할:** 알림 발송을 성공적으로 마친 작업을 '처리 중 큐'에서 **정확히 하나만 제거**하여, 동일한 작업이 중복 처리되는 것을 방지합니다.\n-   **Java `RedisTemplate` 반환 타입:** `Long`\n    -   제거된 요소의 개수가 반환됩니다. 보통 `1`이 반환되며, `0`이 반환되면 무언가 잘못된 상황(예: 이미 삭제됨)임을 인지할 수 있습니다.\n    ```java\n    // count: 1 > 앞에서부터 taskId와 일치하는 요소 1개만 제거\n    Long removedCount = redisTemplate.opsForList().remove(\"daily_notification:processing_queue:EMAIL\", 1, taskId);\n    ```\n</details>",
        "operationId": "run_monitoring_api_v1_monitoring_run_monitoring_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MonitoringResponse"
                }
              }
            }
          },
          "404": {
            "description": "모니터링 엔드포인트를 찾을 수 없음"
          },
          "500": {
            "description": "서버 내부 오류"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatRequest": {
        "properties": {
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "회원 ID. 없으면 비회원으로 간주함."
          },
          "session_uuid": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Uuid",
            "description": "기존 채팅 세션의 UUID. 새 채팅 시작 시에는 null."
          },
          "message": {
            "type": "string",
            "maxLength": 5000,
            "minLength": 1,
            "title": "Message",
            "description": "사용자의 질문 메시지"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "ChatRequest",
        "description": "/api/v1/chat 엔드포인트에 대한 요청 스키마.\n구현계획.md vFinal 및 chat_endpoint_implementation_plan.md v1.0 기준."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "MonitoringResponse": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "monitored_bookmarks": {
            "type": "integer",
            "title": "Monitored Bookmarks"
          },
          "updates_found": {
            "type": "integer",
            "title": "Updates Found"
          },
          "lock_status": {
            "type": "string",
            "title": "Lock Status"
          }
        },
        "type": "object",
        "required": [
          "status",
          "monitored_bookmarks",
          "updates_found",
          "lock_status"
        ],
        "title": "MonitoringResponse",
        "description": "모니터링 실행 결과 응답 모델"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}